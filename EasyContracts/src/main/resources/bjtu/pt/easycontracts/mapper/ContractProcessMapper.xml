<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="bjtu.pt.easycontracts.mapper.ContractProcessMapper" >
  <resultMap id="BaseResultMap" type="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    <id column="Use_userId" property="useUserid" jdbcType="INTEGER" />
    <result column="contractId" property="contractid" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="bjtu.pt.easycontracts.pojo.table.ContractProcess" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Use_userId, contractId, userId, type, state, time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcessExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contract_process
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcessExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contract_process
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contract_process
    where Use_userId = #{useUserid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from contract_process
    where Use_userId = #{useUserid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcessExample" >
    delete from contract_process
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    insert into contract_process (Use_userId, contractId, userId, 
      type, state, time, 
      content)
    values (#{useUserid,jdbcType=INTEGER}, #{contractid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    insert into contract_process
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="useUserid != null" >
        Use_userId,
      </if>
      <if test="contractid != null" >
        contractId,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="useUserid != null" >
        #{useUserid,jdbcType=INTEGER},
      </if>
      <if test="contractid != null" >
        #{contractid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcessExample" resultType="java.lang.Integer" >
    select count(*) from contract_process
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update contract_process
    <set >
      <if test="record.useUserid != null" >
        Use_userId = #{record.useUserid,jdbcType=INTEGER},
      </if>
      <if test="record.contractid != null" >
        contractId = #{record.contractid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update contract_process
    set Use_userId = #{record.useUserid,jdbcType=INTEGER},
      contractId = #{record.contractid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      time = #{record.time,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update contract_process
    set Use_userId = #{record.useUserid,jdbcType=INTEGER},
      contractId = #{record.contractid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      time = #{record.time,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    update contract_process
    <set >
      <if test="contractid != null" >
        contractId = #{contractid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where Use_userId = #{useUserid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    update contract_process
    set contractId = #{contractid,jdbcType=INTEGER},
      userId = #{userid,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where Use_userId = #{useUserid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="bjtu.pt.easycontracts.pojo.table.ContractProcess" >
    update contract_process
    set contractId = #{contractid,jdbcType=INTEGER},
      userId = #{userid,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP}
    where Use_userId = #{useUserid,jdbcType=INTEGER}
  </update>
</mapper>